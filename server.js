// === 1. –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø ===
const express = require('express');
require('dotenv').config();
const { GoogleGenerativeAI } = require('@google/generative-ai');
const admin = require('firebase-admin');

// === 2. –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
const app = express();
// –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Render, –∞–±–æ 3000 –ª–æ–∫–∞–ª—å–Ω–æ
const port = process.env.PORT || 3000; 
app.use(express.json());
app.use(express.static('.'));

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Firebase ---
// –ü–†–ò–ú–Ü–¢–ö–ê: –î–ª—è Render.com —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
// –∑ JSON-–∫–ª—é—á–µ–º –∑–∞–º—ñ—Å—Ç—å —Ñ–∞–π–ª—É serviceAccountKey.json
const serviceAccount = require('./serviceAccountKey.json'); 
admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});
const db = admin.firestore();

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Gemini ---
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const generationModel = genAI.getGenerativeModel({ model: "gemini-2.5-flash" }); 
// –ú–æ–¥–µ–ª—å –¥–ª—è Embeddings (—Ö–æ—á–∞ —Ç—É—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ key-word RAG)
const embeddingModel = genAI.getGenerativeModel({ model: "text-embedding-004" }); 

// --- –ü–µ—Ä—Å–æ–Ω–∞ –ë–æ—Ç–∞ ---
const botPersona = `
–¢–∏ ‚Äî "–û–ø—É—Å", –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–∏–≥ —Ç–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –¢–≤–æ—è –º–µ—Ç–∞ ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø–∏—Å–∞—Ç–∏ –∫–Ω–∏–≥—É –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º, –≤—ñ–¥ —ñ–¥–µ—ó –¥–æ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É.

–¢–≤–æ—ó –≥–æ–ª–æ–≤–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏:
1.  **–¢–∏ ‚Äî –°–ø—ñ–≤–∞–≤—Ç–æ—Ä:** –°—Ç–∞–≤ –Ω–∞–≤—ñ–¥–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø–∏—Å–∞—Ç–∏. –ù–µ –ø–∏—à–∏ –≤–µ–ª–∏–∫—ñ —à–º–∞—Ç–∫–∏ —Ç–µ–∫—Å—Ç—É –∑–∞ –Ω—å–æ–≥–æ.
2.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äî —Ü–µ –≤—Å–µ:** –ó–∞–≤–∂–¥–∏ –¥—É–º–∞–π –ø—Ä–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∂–∞–Ω—Ä, 3-–∞–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ä–æ–∑–≤–∏—Ç–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞).
3.  **–¢–æ–Ω:** –ë—É–¥—å –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–º, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º —Ç–∞ –Ω–∞–¥–∏—Ö–∞—é—á–∏–º. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ (‚úçÔ∏è, üìö, ü§î, ‚ú®) –¥–æ—Ä–µ—á–Ω–æ.
4.  **–°—Ç–∏—Å–ª—ñ—Å—Ç—å:** –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ (2-3 —Ä–µ—á–µ–Ω–Ω—è), —â–æ–± –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ç–µ–º–ø —Ä–æ–∑–º–æ–≤–∏.
`;

// --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó ---
const createInitialHistory = (title) => {
    return [
        { role: "user", parts: [{ text: botPersona }] },
        { role: "model", parts: [{ text: `–Ø –û–ø—É—Å. –†–∞–¥–∏–π –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –Ω–∞–¥ –≤–∞—à–æ—é –Ω–æ–≤–æ—é –∫–Ω–∏–≥–æ—é "${title}"! –ó —è–∫–æ—ó —ñ–¥–µ—ó –ø–æ—á–Ω–µ–º–æ? ‚úçÔ∏è` }] }
    ];
};

// =======================================================
// –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –†–û–ó–£–ú–ù–ò–ô –ü–û–®–£–ö –ö–û–ù–¢–ï–ö–°–¢–£ (SMART RAG)
// =======================================================

/**
 * –í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —É –≤—Å—ñ—Ö –ø—Ä–æ—î–∫—Ç–∞—Ö –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.
 * @param {string} query –ü—Ä–æ–º–ø—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è RAG-–ø–æ—à—É–∫—É.
 * @returns {string} –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ –∑ 3-–º–∞ –Ω–∞–π–±—ñ–ª—å—à —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ —É—Ä–∏–≤–∫–∞–º–∏.
 */
async function getRelevantContext(query) {
    const CHUNKS_TO_RETRIEVE = 3;
    const queryLower = query.toLowerCase();
    
    // 1. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —É—Ä–∏–≤–∫–∏ –∑ –±–∞–∑–∏ (–ª–∏—à–µ 100 –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ)
    const allProjectsSnapshot = await db.collection('projects').limit(100).get();
    let allSnippets = [];

    allProjectsSnapshot.forEach(doc => {
        const history = doc.data().history;
        // –í–∏—Ç—è–≥—É—î–º–æ –ª–∏—à–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è
        history.forEach(msg => {
            if (msg.role === 'model' && msg.parts[0].text) {
                allSnippets.push(msg.parts[0].text);
            }
        });
    });

    if (allSnippets.length === 0) return "";
    
    // 2. –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (–°–ø—Ä–æ—â–µ–Ω–∏–π —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π RAG)
    const queryWords = queryLower.split(/\s+/).filter(w => w.length > 3); // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ —Å–ª–æ–≤–∞
    
    const relevantSnippets = allSnippets.filter(snippet => 
        queryWords.some(word => snippet.toLowerCase().includes(word))
    );
    
    // 3. –û–±–º–µ–∂—É—î–º–æ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const contextText = relevantSnippets
        .slice(0, CHUNKS_TO_RETRIEVE)
        .join('\n---\n');

    if (contextText) {
        return `\n\n[–£–†–ò–í–ö–ò –ö–û–õ–ï–ö–¢–ò–í–ù–û–ì–û –†–û–ó–£–ú–£ (–¥–ª—è –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è): \n${contextText}\n]\n\n`;
    }
    
    return "";
}


// === 3. –ú–ê–†–®–†–£–¢–ò API ===

// (–ó–∞–ª–∏—à–∞—î–º–æ /get-projects, /create-project, /chat-history, /delete-project, /export-project, /update-title –ë–ï–ó –ó–ú–Ü–ù)

// --- –û–ù–û–í–õ–ï–ù–ò–ô –ú–∞—Ä—à—Ä—É—Ç: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç ---
app.post('/chat', async (req, res) => {
    const { projectID, message, user } = req.body; 
    if (!projectID || !message || !user) {
        return res.status(400).json({ message: "–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ projectID, message —Ç–∞ user" });
    }

    try {
        // –ö–†–û–ö 1: –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ—î–∫—Ç—É
        const projectDocRef = db.collection('projects').doc(projectID);
        const doc = await projectDocRef.get();
        if (!doc.exists) {
            return res.status(404).json({ message: "–ü—Ä–æ—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
        }
        let history = doc.data().history;
        
        // --- –ö–†–û–ö 2: –ó–∞–ø—É—Å–∫ Smart RAG ---
        let inspirationPrompt = "";
        
        const inspirationKeywords = ['—ñ–¥–µ—è', '–ø—Ä–∏–¥—É–º–∞–π', '–¥–æ–ø–æ–º–æ–∂–∏', '–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è', '–ø–æ–≤–æ—Ä–æ—Ç', '—Å—é–∂–µ—Ç', '–≥–µ—Ä–æ–π'];
        const needsInspiration = inspirationKeywords.some(k => message.toLowerCase().includes(k));

        if (needsInspiration) {
            console.log("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞—î –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è. –ó–∞–ø—É—Å–∫–∞—é Smart RAG...");
            inspirationPrompt = await getRelevantContext(message); 
        }
        
        // --- –ö–†–û–ö 3: –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Gemini ---
        const messageWithContext = message + inspirationPrompt; 
        
        // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑ RAG-–∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        history.push({ role: "user", parts: [{ text: messageWithContext }] });
        
        // –í–∏–∫–ª–∏–∫ Gemini
        const result = await generationModel.generateContent({ contents: history });
        const botResponse = result.response.text;
        
        console.log(`Gemini –≤—ñ–¥–ø–æ–≤—ñ–≤ –¥–ª—è –ø—Ä–æ—î–∫—Ç—É ${projectID}:`, botResponse);

        // --- –ö–†–û–ö 4: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –í–°–ï –≤ –±–∞–∑—ñ (–ª–∏—à–µ —á–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) ---
        // –í—ñ–¥–∫–æ—á—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ RAG-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
        history.pop(); 
        
        // –î–æ–¥–∞—î–º–æ –ß–ò–°–¢–ò–ô –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–µ–∑ RAG-–∫–æ–Ω—Ç–µ–∫—Å—Ç—É)
        history.push({ role: "user", parts: [{ text: message }] }); 
        // –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞
        history.push({ role: "model", parts: [{ text: botResponse }] }); 
        
        await projectDocRef.update({ history: history });
        
        // --- –ö–†–û–ö 5: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ ---
        res.json({ message: botResponse });

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –≤ /chat:", error);
        res.status(500).json({ message: "–û–π, —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—å —É –º–æ—î–º—É –º–æ–∑–∫—É... –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–µ—Ä–º—ñ–Ω–∞–ª —Å–µ—Ä–≤–µ—Ä–∞." });
    }
});


// === 4. –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===
app.listen(port, () => {
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –ø–æ—Ä—Ç –¥–ª—è Render
    console.log(`‚úÖ The server was successfully started. http://localhost:${port} / https://gemini-opusai.onrender.com`);
});